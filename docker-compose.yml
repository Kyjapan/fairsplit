# Docker Compose for FairSplit Development Environment
# Next.js 14 + TypeScript development setup

version: '3.8'

services:
  # FairSplitアプリケーション開発環境
  fairsplit-dev:
    # Dockerfileからイメージをビルド
    build:
      context: .
      dockerfile: Dockerfile
    
    # コンテナ名を明示的に指定
    container_name: fairsplit-dev
    
    # ホストのポート3000をコンテナのポート3000にマッピング
    # http://localhost:3000 でアクセス可能
    ports:
      - "3000:3000"
    
    # ボリュームマウント設定
    volumes:
      # ローカルのソースコードをコンテナの/appにマウント
      # ホットリロードを有効にするため
      - .:/app
      
      # node_modulesを名前付きボリュームとして分離
      # ホストとコンテナ間でのnode_modules競合を防ぐ
      # 依存関係インストールの高速化
      - node_modules:/app/node_modules
    
    # 開発環境用の環境変数
    environment:
      # Next.js開発モード
      - NODE_ENV=development
      
      # Next.jsサーバーポート
      - PORT=3000
      
      # すべてのネットワークインターフェースでリッスン
      # Dockerコンテナ外からのアクセスを許可
      - HOSTNAME=0.0.0.0
      
      # Next.jsテレメトリー無効化
      - NEXT_TELEMETRY_DISABLED=1
    
    # 開発サーバー起動コマンド
    # Next.jsの開発サーバーをホットリロード有効で起動
    command: sh -c "npm install && npm run dev"
    
    # stdin_open + ttyでインタラクティブモード有効
    # デバッグやコンテナ内でのコマンド実行を可能にする
    stdin_open: true
    tty: true
    
    # ヘルスチェック設定
    # アプリケーションが正常に起動しているかを定期確認
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# 名前付きボリューム定義
volumes:
  # node_modules用の永続ボリューム
  # コンテナ再作成時も依存関係を保持
  # npm installの実行時間短縮
  node_modules: